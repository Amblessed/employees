# ------------------- GENERIC GET TEST WITH SEVERITY -------------------
@pytest.mark.get
@pytest.mark.parametrize("case", testcases_get_by_id)
def test_get_employee_by_id(case):
    """
    Generic GET test for Employees API with dynamic Allure labels and severity.
    """
    response, case = run_request(RequestType.GET, case, feature="Get Employee By ID")
    response_json = response.json()

    # Case: Get employee by ID
    employee_id = case.get("endpoint").split("/")[-1]
    employee_from_db = get_employee_from_db(employee_id)
    print("?????????????????????????????????????????")
    employee = response_json.get("employee")
    print(employee_id)
    print(employee)
    print(employee_from_db)
    print("?????????????????????????????????????????")

    # Negative test
    if case.get("type") == "Negative Test":
        assert response.status_code == case.get("expected_status"), "Get Employee By ID test failed"
        assert response_json.get("detail") == case.get("expected_detail"), "Get Employee By ID test failed"
        return

    # Positive test
    employee = response_json.get("employee")
    for key in ["firstName", "lastName", "email"]:
        assert employee.get(key) == employee_from_db.get(key), f"Get Employee By ID test failed for {key}"

# ------------------- GENERIC GET ALL EMPLOYEES TEST WITH SEVERITY -------------------
@pytest.mark.getall
@pytest.mark.parametrize("case", testcases_get_all)
def test_get_all_employees(case):
    """
    Generic GET test for Employees API with dynamic Allure labels and severity.
    """
    response, case = run_request(RequestType.GET, case, feature="Get All Employees")
    response_json = response.json()
    if case.get("type") == "Negative Test":
        assert response.status_code == case.get("expected_status"), "Get All Employees test failed"
        assert response_json.get("detail") == case.get("expected_detail"), "Get All Employees test failed"
        return
    employees = response_json.get("employees")
    assert employees is not None, "Response should contain 'employees' key"
    assert isinstance(employees, list), "'employees' should be a list"

    page_size = int(case["params"]["size"]) if case.get("params") else case["size"]
    assert len(employees) == page_size, "Get All Employees test failed"


# ------------------- GENERIC GET ALL EMPLOYEES BY SEARCH TEST WITH SEVERITY -------------------
@pytest.mark.getallsearch
@pytest.mark.parametrize("case", testcases_get_all_search)
def test_get_all_employees_by_search(case):
    """
    Generic GET test for Employees API with dynamic Allure labels and severity.
    """
    response, case = run_request(RequestType.GET, case, feature="Get All Employees By Search")
    response_body = response.json()
    if case.get("type") == "Negative Test":
        assert response.status_code == case.get("expected_status"), "Get All Employees test failed"
        assert response_body.get("detail") == case.get("expected_detail"), "Get All Employees test failed"
        return


    employees = response_body.get("employees")
    assert employees is not None, "Response should contain 'employees' key"
    assert isinstance(employees, list), "'employees' should be a list"

    # Prepare expected values with defaults
    params = case.get("params") or {}
    expected_values = {
        "department": params.get("department", ""),
        "position": params.get("position", ""),
        "salary": params.get("salary", 50000)
    }

    # Validate API response
    validate_employees(employees, expected_values, source="API")

    # Validate DB results
    database_result = get_all_employees_search_from_db(
        expected_values.get("department"),
        expected_values.get("position"),
        expected_values.get("salary")
    )
    validate_employees(database_result, expected_values, source="DB")


