name: CI Employees + Pytest + Allure

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      POSTGRESQL_USERNAME: employee
      POSTGRESQL_PASSWORD: employee
      POSTGRESQL_DB: employeeDB
      CI: true
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: employee
          POSTGRES_PASSWORD: employee
          POSTGRES_DB: employeeDB
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U employee -d employeeDB"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=30

    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Verify Postgres connection
        env:
          PGPASSWORD: ${{ env.POSTGRESQL_PASSWORD }}
        run: |
          echo "🔎 Checking Postgres health..."
          pg_isready -h localhost -p 5432 -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DB || true
          echo "🔎 Trying direct connection..."
          psql -h localhost -p 5432 -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DB -c "\q" || true


      - name: Dump Postgres logs if connection failed
        if: failure()
        run: |
          echo "⚠️ Postgres connection failed — dumping container logs"
          docker ps -a
          docker logs $(docker ps -q --filter "ancestor=postgres:15")

      - name: Load schema and data
        env:
          PGPASSWORD: ${{ env.POSTGRESQL_PASSWORD }}
        run: |
          psql -h localhost -p 5432 -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DB -f src/main/resources/db/data.sql

      # 🏗️ Set up Java 21
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # 🛠️ Install Maven dependencies
      - name: Install Maven dependencies
        run: mvn clean install -DskipTests

      # 🚀 Start Spring Boot and wait for port 9090
      - name: Start Spring Boot
        run: |
          mvn spring-boot:run &
          echo $! > spring_pid.txt
          echo "Waiting for Spring Boot to be ready..."
          for i in {1..60}; do
            nc -z localhost 9090 && echo "Spring Boot is up!" && break
            sleep 2
          done

      - name: Install Python dependencies
        run: |
          pip install -r src/test/python/requirements.txt
          pip install allure-pytest requests

      # 🧪 Run Pytest with Allure
      - name: Run Pytest with Allure
        run: |
          pytest src/test/python/test_endpoints.py --alluredir=allure-results -v || true

      # 🧰 Install Allure CLI
      - name: Install Allure
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://github.com/allure-framework/allure2/releases/download/2.29.0/allure-2.29.0.zip
          unzip allure-2.29.0.zip -d /opt/
          sudo ln -s /opt/allure-2.29.0/bin/allure /usr/bin/allure

      # 📊 Generate Allure Report
      - name: Generate Allure Report
        run: |
          echo "Generating Allure report..."
          ls -la allure-results  # ensure results exist
          allure generate allure-results --clean -o allure-report

      # 📁 Upload Allure Report Artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      # 🌐 Deploy Allure Report to GitHub Pages
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          keep_files: true
          force_orphan: true


      # 🧹 Stop Spring Boot
      - name: Stop Spring Boot
        if: always()
        run: kill $(cat spring_pid.txt) || true
