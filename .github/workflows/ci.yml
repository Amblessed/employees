name: CI Employees + Pytest + Allure

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      POSTGRESQL_USERNAME: employee
      POSTGRESQL_PASSWORD: employee
      POSTGRESQL_DB: employeeDB
      CI: true
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      RESOURCE_DIR: ${{ github.workspace }}/src/test/resources  # <-- added
      USER_DETAILS_PATH: ${{ github.workspace }}/src/test/resources/user_details.json

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: employee
          POSTGRES_PASSWORD: employee
          POSTGRES_DB: employeeDB
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U employee -d employeeDB"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=30

    steps:
      - uses: actions/checkout@v4

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client wget unzip
          pip install -r src/test/python/requirements.txt
          pip install allure-pytest requests

      # Wait for Postgres
      - name: Wait for Postgres
        env:
          PGPASSWORD: ${{ env.POSTGRESQL_PASSWORD }}
        run: |
          echo "Waiting for Postgres to be ready..."
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -p 5432 -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DB
            if [ $? -eq 0 ]; then
              echo "Postgres is ready!"
              break
            fi
            echo "Postgres not ready yet... retrying in 2s"
            sleep 2
          done

      # Verify Postgres connection
      - name: Verify Postgres connection
        env:
          PGPASSWORD: ${{ env.POSTGRESQL_PASSWORD }}
        run: psql -h 127.0.0.1 -p 5432 -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DB -c "\q"

      # Load schema and data
      - name: Load schema and data
        env:
          PGPASSWORD: ${{ env.POSTGRESQL_PASSWORD }}
        run: psql -h 127.0.0.1 -p 5432 -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DB -f src/main/resources/db/data.sql

      # Set up Java
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install Maven dependencies
        #run: mvn clean install
        run: mvn clean install -DskipTests

      - name: Start Spring Boot
        run: |
          mvn spring-boot:run &
          echo $! > spring_pid.txt
          for i in {1..60}; do
            nc -z localhost 9090 && break
            sleep 2
          done

      - name: Run Pytest with Allure
        run: |
         cd $GITHUB_WORKSPACE  # <-- ensures relative paths resolve correctly
         pytest src/test/python/test_endpoints.py --alluredir=allure-results -v || true

      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.29.0/allure-2.29.0.zip
          unzip allure-2.29.0.zip -d /opt/
          sudo ln -s /opt/allure-2.29.0/bin/allure /usr/bin/allure

      - name: Generate Allure Report
        run: allure generate allure-results --clean -o allure-report

      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Stop Spring Boot
        if: always()
        run: kill $(cat spring_pid.txt) || true

  deploy-pages:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Download Allure Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_PAGES_TOKEN }}
          publish_dir: ./allure-report
          force_orphan: true
          keep_files: true
