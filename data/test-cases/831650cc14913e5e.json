{"uid":"831650cc14913e5e","name":"access_denied","fullName":"src.test.python.test_endpoints#test_security_employee","historyId":"cd5eea5b087d25723b05cb7dda57ebf0","time":{"start":1759269528712,"stop":1759269528896,"duration":184},"description":"\n    Generic SECURITY test for Employee API with dynamic Allure labels and severity.\n    ","descriptionHtml":"<pre><code>Generic SECURITY test for Employee API with dynamic Allure labels and severity.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Unexpected status code => Expected: 403, Actual: 400","statusTrace":"case = {'access_target': 'other', 'check_field': 'detail', 'endpoint': '/id/EMP-B69B0AD4', 'expected_detail': 'You are not authorized to access this resource.', ...}\n\n    @pytest.mark.security\n    @pytest.mark.parametrize(\"case\", test_cases_security)\n    def test_security_employee(case):\n        \"\"\"\n        Generic SECURITY test for Employee API with dynamic Allure labels and severity.\n        \"\"\"\n>       run_request(RequestType(case[\"method\"]), case, feature=\"Security Test\")\n\nsrc/test/python/test_endpoints.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/test/python/utilities.py:220: in run_request\n    validate_response(response, case)\nsrc/test/python/utilities.py:282: in validate_response\n    _validate_status_code(response, case[\"expected_status\"])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, status_code = 403\n\n    def _validate_status_code(response: requests.Response, status_code: int):\n        \"\"\"Helper to validate status code in response body.\"\"\"\n        #_print_response(response)\n        actual_status = response.status_code\n>       assert actual_status == status_code, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"Unexpected status code => Expected: {status_code}, Actual: {actual_status}\"\n        )\nE       AssertionError: Unexpected status code => Expected: 403, Actual: 400\n\nsrc/test/python/utilities.py:290: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759269481743,"stop":1759269481795,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"spring_boot_server","time":{"start":1759269481795,"stop":1759269481795,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    Generic SECURITY test for Employee API with dynamic Allure labels and severity.\n    ","status":"failed","statusMessage":"AssertionError: Unexpected status code => Expected: 403, Actual: 400","statusTrace":"case = {'access_target': 'other', 'check_field': 'detail', 'endpoint': '/id/EMP-B69B0AD4', 'expected_detail': 'You are not authorized to access this resource.', ...}\n\n    @pytest.mark.security\n    @pytest.mark.parametrize(\"case\", test_cases_security)\n    def test_security_employee(case):\n        \"\"\"\n        Generic SECURITY test for Employee API with dynamic Allure labels and severity.\n        \"\"\"\n>       run_request(RequestType(case[\"method\"]), case, feature=\"Security Test\")\n\nsrc/test/python/test_endpoints.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/test/python/utilities.py:220: in run_request\n    validate_response(response, case)\nsrc/test/python/utilities.py:282: in validate_response\n    _validate_status_code(response, case[\"expected_status\"])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, status_code = 403\n\n    def _validate_status_code(response: requests.Response, status_code: int):\n        \"\"\"Helper to validate status code in response body.\"\"\"\n        #_print_response(response)\n        actual_status = response.status_code\n>       assert actual_status == status_code, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"Unexpected status code => Expected: {status_code}, Actual: {actual_status}\"\n        )\nE       AssertionError: Unexpected status code => Expected: 403, Actual: 400\n\nsrc/test/python/utilities.py:290: AssertionError","steps":[],"attachments":[{"uid":"a485bdde50cad857","name":"Response Body","source":"a485bdde50cad857.json","type":"application/json","size":528}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"spring_boot_server::0","time":{"start":1759269529586,"stop":1759269529586,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Security Test"},{"name":"story","value":"Access Denied"},{"name":"severity","value":"critical"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"src.test.python"},{"name":"suite","value":"test_endpoints"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"3725-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.test.python.test_endpoints"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'story': 'Access Denied', 'endpoint': 'RANDOM_VALID_ID', 'params': {}, 'payload': {}, 'expected_status': 403, 'expected_detail': 'You are not authorized to access this resource.', 'check_field': 'detail', 'type': 'Negative Test', 'user_role': 'Employee', 'access_target': 'other', 'method': 'PUT'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"831650cc14913e5e.json","parameterValues":["{'story': 'Access Denied', 'endpoint': 'RANDOM_VALID_ID', 'params': {}, 'payload': {}, 'expected_status': 403, 'expected_detail': 'You are not authorized to access this resource.', 'check_field': 'detail', 'type': 'Negative Test', 'user_role': 'Employee', 'access_target': 'other', 'method': 'PUT'}"]}